@using RkaaAVLS.Models.Entites

@{

    ViewBag.Title = "Home Page";
}

<link rel="stylesheet" href="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/css/ol.css" type="text/css">
<style>
    .map {
        height: 100%;
        width: 100%;
    }
</style>
<script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>
<div class="row">
    <div style="height: 80%;" class="col-md-8">
        <div id="map" class="map"></div>
    </div>
    <div class="col-md-4">
        <div style="padding:5%;padding-right:10%" class="row">
            <input type="search" id="filterNodes" placeholder="جستجو..." class="form-control" onkeypress="filterNodes()" />
        </div>
        <div class="row" id="tree"></div>
    </div>
</div>
@section scripts
    {
    @Scripts.Render("~/bundles/bootstrap-treeview")
<script>

            var currentSelectedVehicleId = 0;
        var checkedVehicleIds = [];
        var gpsDatas = null;

        function getTree() {
            @{
                var subOrganizations =(List<SubOrganization>) ViewBag.SubCompanyList;
             }
            var tree = [
            @foreach (var item in subOrganizations)
                        {
                <text>
                    {
                        text: '@item.SubOrganName',
                        showCheckbox: true,
                        selectable: true,
                        nodes: [
                            @foreach(var v in item.Vehicles)
                            {
                                <text>
                                {
                                   showCheckbox: true,
                                   text: '@v.VehicleName',
                                   value:@v.VehicleId
                                },
                                </text>
                            }
                        ]
                    },
                </text>
                        }
            ];
            return tree;
        }
        var _this = this;
        var $checkableTree = $('#tree').treeview({
            data: getTree(),
            showIcon: true,
            showCheckbox: true,
            onNodeChecked: function (event, node) {
                if (_this.checkedVehicleIds==null || _this.checkedVehicleIds.indexOf(node.value)>-1)
                    return;
                _this.checkedVehicleIds.push(node.value);
                _this.getGpsData();
            },
            onNodeUnchecked: function (event, node) {
                if (_this.checkedVehicleIds == null || _this.checkedVehicleIds.indexOf(node.value) == -1)
                    return;
                var index = checkedVehicleIds.indexOf(node.value);
                if (index > -1) {
                    _this.checkedVehicleIds.splice(index, 1);
                }
                _this.getGpsData();
            },
            //onNodeSelected: function (event, node) {
            //    _this.currentSelectedVehicleId = node.value;
            //    $('#myModal').modal('show');
            //    _this.loadVehicle();
            //}
        });

        function setMap() {

            $('#map').html("");

            var lamarin = ol.proj.fromLonLat([51.42151, 35.69439]);
            var view = new ol.View({
                center: lamarin,
                zoom: 4 // 5
            });

            var vectorSource = new ol.source.Vector({});
            var places = [
            ];

            if (this.gpsDatas != null) {
                for (var i = 0; i < this.gpsDatas.length; i++) {
                    places.push([this.gpsDatas[i].X, this.gpsDatas[i].Y, '/Content/suv.png', '#8959A8']);
                }
            }

            var features = [];
            for (var i = 0; i < places.length; i++) {

                var iconFeature = new ol.Feature({
                    geometry: new ol.geom.Point(ol.proj.transform([places[i][0], places[i][1]], 'EPSG:4326', 'EPSG:3857')),
                });

                var iconStyle = new ol.style.Style({
                    image: new ol.style.Icon({
                        anchor: [0, 0],
                        anchorXUnits: 'fraction',
                        anchorYUnits: 'fraction',
                        src: places[i][2],
                        color: places[i][3],
                        crossOrigin: 'anonymous',
                    })
                });
                iconFeature.setStyle(iconStyle);
                vectorSource.addFeature(iconFeature);
            }

            var vectorLayer = new ol.layer.Vector({
                source: vectorSource,
                updateWhileAnimating: true,
                updateWhileInteracting: true,
            });

            var map = new ol.Map({
                target: 'map',
                view: view,
                layers: [
                    new ol.layer.Tile({
                        preload: 3,
                        source: new ol.source.OSM(),
                    }),
                    vectorLayer,
                ],
                loadTilesWhileAnimating: true,
            });

        //51.42151,35.69439
        }

        function filterNodes() {
            var text = $('#filterNodes').val()
            $('#tree').treeview('search', [text, {
                ignoreCase: true,     // case insensitive
                exactMatch: false,    // like or equals
                revealResults: true,  // reveal matching nodes
            }]);
        }

        function getGpsData() {
            var request = {
                VehicleIds: this.checkedVehicleIds
            }
            var _this = this;
            $.ajax({
                url: "/Home/GetGpsData",
                type: "post",
                contentType: "application/json",
                data: JSON.stringify(request),
                success: function (data) {
                    _this.gpsDatas = JSON.parse(data);
                    _this.setMap();
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });
        }

        this.setMap();

</script>

}
